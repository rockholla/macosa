#!/bin/bash

macosa_bin_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$macosa_bin_dir/../"

update=false
logout=false
passthru=""
update_macosa=false

function usage () {
   cat <<EOF
Usage: `basename "$0"` [-h] [-u] [-l]

Options:
  -h        Show this help
  -u        Run a MacOS software update and macOSa update before provisioning
  -l        Logout when finished
  command:
    update  When this command is provided, MacOSa will be updated with the most recent 'master' version on github only


Other options:
  Anything you can pass to 'ansible-playbook' you can also pass to this script, for example:

    `basename "$0"` --tags=homebrew,client1

Ansible Playbook Help:
`ansible-playbook --help`

EOF
  exit 0
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h)
      usage
      shift
      ;;
    -u)
      update=true
      update_macosa=true
      shift
      ;;
    -l)
      logout=true
      shift
      ;;
    *)
      passthru="$passthru $1"
      shift
      ;;
  esac
done

if [ -d .git ]; then
  git fetch
  commit_hash=$(git rev-parse origin/master)
  existing_version=$(git rev-parse HEAD)
  update_command="'git pull origin master' from ~/.macosa"
else
  commit_hash=$(curl -s https://api.github.com/repos/rockholla/macosa/branches/master | grep '"sha":' | head -1 | awk -F ':' '{print $2}' | awk -F '"' '{print $2}')
  existing_version=$([ -f .version ] && cat .version)
  update_command="'macosa -u'"
fi
if [[ "$commit_hash" != "$existing_version" ]]; then
  printf "\033[33mThere's an updated version of macOSa available, run $update_command to update\033[0m\n"
fi

if $update_macosa; then
  printf "Updating MacOSa...\n"
  ./bin/macosa_download "update"
  exit 0
fi

# Ask for sudo password and keep alive until this script finishes
echo $(cat ~/.macosa/.vaultpass) | sudo -S echo "Initializing sudo"
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

if [ -f user/reminders/before ]; then
  printf "There are some reminders for you before this run:\n"
  printf "\033[33m\n"
  cat user/reminders/before
  printf "\033[0m\n"
  read -rsp $'Press any key to continue...\n' -n1 key
fi

if $update; then
  ./bin/macosa_softwareupdate
fi

# Install Python

if ! brew ls --versions python &>/dev/null; then
  printf "Installing Python via Homebrew...\n"
  brew install python
else
  printf "Python is installed via Homebrew.\n"
fi

# link python to python2 if necessary
if command -v python2 &>/dev/null; then
  if [ ! -f /usr/local/bin/python ]; then
    ln -s $(which python2) /usr/local/bin/python
  fi
fi

# link python to python3 if necessary
if command -v python3 &>/dev/null; then
  if [ ! -f /usr/local/bin/python ]; then
    ln -s $(which python3) /usr/local/bin/python
  fi
fi

# link pip to pip2 if pip2 was installed
if command -v pip2 &>/dev/null; then
  if [ ! -f /usr/local/bin/pip ]; then
    ln -s $(which pip2) /usr/local/bin/pip
  fi
fi

# link pip to pip3 if pip3 was installed
if command -v pip3 &>/dev/null; then
  if [ ! -f /usr/local/bin/pip ]; then
    ln -s $(which pip3) /usr/local/bin/pip
  fi
fi

# Install python package biplist
if ! python -c "import biplist" &>/dev/null; then
  printf "Installing biplist...\n"
  pip install biplist
else
  printf "biplist is installed.\n"
fi

# Install Ansible
if ! command -v ansible &>/dev/null; then
  printf "Installing Ansible...\n"
  pip install ansible
else
  printf "Ansible is installed.\n"
fi

####################################
# Ansible Provisioning             #
####################################

# Install ansible requirements
if [ -f requirements.yml ]; then
  printf "Installing Ansible requirements...\n"
  ansible-galaxy install -r requirements.yml
fi

# Run the playbook
printf "Running main playbook against local connection...\n"
become_pass=$(cat .vaultpass)
if ! ansible-playbook -i inventory/all --extra-vars="ansible_become_pass=$become_pass" $passthru macos.yml; then
  printf "\033[31mmacOSa provisioning failed\033[0m\n"
  exit 1
fi

if [ -f user/reminders/after ]; then
  printf "There are some reminders for you after this run:\n"
  printf "\033[33m\n"
  cat user/reminders/after
  printf "\033[0m\n"
fi

if [ -f .logout ] || [ $logout == true ]; then
  printf "This run requires you to log out and back in:\n"
  ./bin/macosa_logout
  rm .logout
else
  printf "\n\033[33mNOTE: You may need to re-source your .bash_profile ( . ~/.bash_profile) or in certain cases close and reopen your terminal for changes to take effect\033[0m\n\n"
fi
