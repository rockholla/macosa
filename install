#!/bin/bash

passthru=""
xcode="tools"
remote=false

function usage () {
   cat <<EOF
Usage: `basename "$0"` [-r] [-h] [-x full|tools]

Options:
  -r                        If present, this is a remote install and the repo should be downloaded locally first
  -h                        Show this help
  -x [Xcode install type]   If "full", will ensure full XCode installation, if "tools" just installs XCode cli tools (default is "tools")

EOF
  exit 0
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    -r)
      remote=true
      shift
      ;;
    -h)
      usage
      shift
      ;;
    -x)
      xcode="$2"
      shift 2
      ;;
    *)
      passthru="$passthru $1"
      shift
      ;;
  esac
done

if $remote; then
  cd /tmp
  curl -L -o master.zip https://github.com/rockholla/macosa/zipball/master/
  unzip master.zip
  mv rockholla-macosa* macosa
  install_source="/tmp/macosa"
else
  install_source="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
fi
cd "$install_source"
source config/defaults.cfg
for user_config_file in user/config/*.cfg; do
  [ -f "$user_config_file" ] || continue
  source user_config_file
done

if pwd | grep $HOME &>/dev/null; then
  printf "\033[31mYou're trying to run the install from the installation destination, just run 'macosa' instead to provision\033[0m\n"
  exit 1
fi

# Ask for sudo password and keep alive until this script finishes
sudo -v
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

# disable computer and display sleep during install (assume that ansible config will set as it sees fit, so we don't need to reset)
sudo systemsetup -setcomputersleep Never
sudo systemsetup -setdisplaysleep Never

# move launchd on-reboot item into place
cp files/com.macosa.onboot.plist ~/Library/LaunchAgents/
username=$(whoami)
sed -i -e "s/{{ whoami }}/$username/g" ~/Library/LaunchAgents/com.macosa.onboot.plist
chmod 0644 ~/Library/LaunchAgents/com.macosa.onboot.plist

# Let's run a system software update first before installing
./bin/macosa_softwareupdate '$install_source/install "$@"'

# We need at least xcode tools installed before installing rvm
./bin/macosa_xcode tools 1>/dev/null

./bin/macosa_ruby '$install_source/install "$@"'

# make sure xcode and/or xcode tools are installed
./bin/macosa_xcode $xcode

printf "Installing MacOSa to your machine...\n"
# Install this repo to ~/.macosa
rsync -a . ~/.macosa

# initialize local variable file
echo "# This file is automatically generated during the MacOSa install" > ~/.macosa/vars/macosa-generated.yml
echo "---" > ~/.macosa/vars/macosa-generated.yml

# Capture and write out computer name to variables
read -p "What do you want to name this Mac? " machine_name
echo "computer_name: \"$machine_name\"" >> ~/.macosa/vars/macosa-generated.yml

# Capture and write out sudo password to variables
while [ -z $root_pass ] || [ -z $root_pass_confirm ] || [ $root_pass != $root_pass_confirm ]; do
  read -s -p "And what is the root password for this Mac? (will also be used as the Ansible vault password) " root_pass
  printf "\n"
  read -s -p "Re-enter the password: " root_pass_confirm
  if [ $root_pass != $root_pass_confirm ]; then
    printf "\n\033[31mPasswords don't match, please try again\033[0m\n"
  fi
done
printf "\n"

echo "ansible_become_pass: \"$root_pass\"" >> ~/.macosa/vars/macosa-generated.yml
echo $root_pass > ~/.macosa/.vaultpass

# Save the path to this install directory so we can auto-sync changes from the install location back to here
echo "macosa_install_source: \"$install_source\"" >> ~/.macosa/vars/macosa-generated.yml

printf "\nRunning MacOSa script for local machine setup and provisioning...\n"
~/.macosa/bin/macosa -l $passthru
