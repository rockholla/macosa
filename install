#!/bin/bash

passthru=""
xcode="tools"
remote=false
root_pass=""
root_pass_confirm=""
fresh=false

function usage () {
   cat <<EOF
Usage: `basename "$0"` [-f] [-r] [-h] [-x full|tools]

Options:
  -f                        Force a fresh install
  -r                        If present, this is a remote install and the repo should be downloaded locally first
  -h                        Show this help
  -x [Xcode install type]   If "full", will ensure full XCode installation, if "tools" just installs XCode cli tools (default is "tools")

EOF
  exit 0
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    -f)
      fresh=true
      shift
      ;;
    -r)
      remote=true
      shift
      ;;
    -h)
      usage
      shift
      ;;
    -x)
      xcode="$2"
      shift 2
      ;;
    *)
      passthru="$passthru $1"
      shift
      ;;
  esac
done

if $remote; then
  cd ~/Downloads
  if [ ! -d macosa ] || [ $fresh == true ]; then
    printf "Downloading MacOSa source files...\n"
    rm -rf ~/Downloads/macosa* &>/dev/null
    rm -rf ~/Downloads/rockholla* &>/dev/null
    rm -rf ~/Downloads/master.zip &>/dev/null
    curl -L -o master.zip https://github.com/rockholla/macosa/zipball/master/
    unzip master.zip &>/dev/null
    mv rockholla-macosa* macosa
    rm master.zip
  fi
  install_source="$(pwd)/macosa"
else
  install_source="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
fi
cd "$install_source"
source config/defaults.cfg
for user_config_file in user/config/*.cfg; do
  [ -f "$user_config_file" ] || continue
  source user_config_file
done

if pwd | grep "$HOME/.macosa" &>/dev/null; then
  printf "\033[31mYou're trying to run the install from the installation destination, just run 'macosa' instead to provision\033[0m\n"
  exit 1
fi

# Initially capture the root password for this computer and write it out to .vaultpass
if [ ! -f "$install_source/.vaultpass" ]; then
  while [ -z "$root_pass" ] || [ -z "$root_pass_confirm" ] || [ "$root_pass" != "$root_pass_confirm" ]; do
    read -s -p "What is the root password for this Mac? (will also be used as the MacOSa vault password) " root_pass
    printf "\n"
    read -s -p "Re-enter the password: " root_pass_confirm
    if [ "$root_pass" != "$root_pass_confirm" ]; then
      printf "\n\033[31mPasswords don't match, please try again\033[0m\n"
    fi
  done
  printf "\n"
  echo "$root_pass" > "$install_source/.vaultpass"
else
  root_pass=$(cat "$install_source/.vaultpass")
fi

# disable computer and display sleep during install (assume that ansible config will set as it sees fit, so we don't need to reset)
echo "$root_pass" | sudo -S systemsetup -setcomputersleep Never &> /dev/null
echo "$root_pass" | sudo -S systemsetup -setdisplaysleep Never &> /dev/null

# Time to install the MacOSa files and record a few things
if $fresh; then
  rm -rf ~/.macosa
fi
if [ ! -d ~/.macosa ]; then
  printf "Installing MacOSa to your machine...\n"
  # Install this repo to ~/.macosa
  rsync -a . ~/.macosa
fi

# copy launchd on-reboot item into place
if [ ! -f ~/Library/LaunchAgents/com.macosa.onboot.plist ]; then
  mkdir -p ~/Library/LaunchAgents
  cp ~/.macosa/files/com.macosa.onboot.plist ~/Library/LaunchAgents/
  username=$(whoami)
  sed -i -e "s/{{ whoami }}/$username/g" ~/Library/LaunchAgents/com.macosa.onboot.plist
  chmod 0644 ~/Library/LaunchAgents/com.macosa.onboot.plist
fi

# initialize internal Ansible variable file
if [ ! -f ~/.macosa/vars/internal.yml ]; then
  echo "# This file is automatically generated during the MacOSa install" > ~/.macosa/vars/internal.yml
  echo "---" > ~/.macosa/vars/internal.yml

  # Capture and write out computer name to variables
  read -p "What do you want to name this Mac? " machine_name
  echo "computer_name: \"$machine_name\"" >> ~/.macosa/vars/internal.yml

  # save ansible become pass as the root password
  echo "ansible_become_pass: \"$root_pass\"" >> ~/.macosa/vars/internal.yml

  # Save the path to this install directory so we can auto-sync changes from the install location back to here
  echo "macosa_install_source: \"$install_source\"" >> ~/.macosa/vars/internal.yml
fi

# Let's run a system software update first before installing
./bin/macosa_softwareupdate '$install_source/install "$@"'
# We need at least xcode tools installed before installing rvm
./bin/macosa_xcode tools 1>/dev/null
# We need ruby/rvm early on in the process
./bin/macosa_ruby '$install_source/install "$@"'
# make sure xcode and/or xcode tools are installed
./bin/macosa_xcode $xcode

if [ ! -d ~/.macosa/user ]; then
  say "Time to initialize your area for customizing My MacOSa"
  printf "We need to initialize the 'My MacOSa' part of your install.  Please see https://github.com/rockholla/mymacosa for more info.\n"
  read -p "If you have one, please enter the git ssh repo URI where your MacOSa customizations live (if blank, we'll just create a base repo locally for you from https://github.com/rockholla/mymacosa): " mymacosa_repo
  if [ ! -z $mymacosa_repo ];
    read -p "And a particular version of the repo you'd like to check out? (default = master): " mymacosa_repo_version
    if [ -z $mymacosa_repo_version ]; then
      mymacosa_repo_version="master"
    fi
    git clone $mymacosa_repo ~/.macosa/user
    cd ~/.macosa/user
    git checkout $mymacosa_repo_version
    cd "$install_source"
  else
    cd ~/Downloads
    curl -L -o master.zip https://github.com/rockholla/mymacosa/zipball/master/
    unzip master.zip
    mv rockholla-mymacosa* ~/.macosa/user
    rm master.zip
    cd "$install_source"
  fi
fi

printf "\nRunning MacOSa script for local machine setup and provisioning...\n"
~/.macosa/bin/macosa $passthru

rm -rf "$install_source"
